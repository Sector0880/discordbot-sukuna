import discord
from discord.ext import commands, tasks

import json
import asyncio


class MultiplayerEvents(commands.Cog):
	def __init__(self, bot):
		self.bot = bot
	
	@commands.Cog.listener()
	async def on_guild_join(self, guild):
		# open db
		with open("./.db/multiplayer/guilds.json", "r", encoding="utf-8") as read_file: guilds_config_data = json.load(read_file)

		if str(guild.id) not in guilds_config_data.keys():
			guilds_config_data[str(guild.id)] = {
				"overview": {
					"guild-name": guild.name,
					"guild-id": guild.id,
					"owner-name": guild.owner.name,
					"owner-id": guild.owner.id
				},
				"portal": {
					"presence": True,
					"gateaway": {
						"?open" : True
						#"!block-uuid": "all servers closed!"
					}
				},
				"prefix": "s!",
				"language": "ru",
				"modules": {
					"audit": False,
					"economic": False,
					"fun": False,
					"moderation": False,
					"music": False,
					"profiles": False
				},
				"premium": {
					"?work": False
					#"$p-uuid": "..."
				}
			}
		else:
			guilds_config_data[str(guild.id)]["portal"]["presence"] = True

		
		# write db
		with open("./.db/multiplayer/guilds.json", "w", encoding="utf-8") as write_file: json.dump(guilds_config_data, write_file, ensure_ascii = False, indent = 4)


		# create role muted
		perms = discord.Permissions(connect = False, send_messages = False)
		role_mute = await guild.create_role(name = "Muted_Sukuna", permissions = perms)

		for category in guild.categories: await category.set_permissions(role_mute, connect = False, send_messages = False)

		for channel in guild.text_channels: await channel.set_permissions(role_mute, send_messages = False)
		for channel in guild.voice_channels: await channel.set_permissions(role_mute, connect = False)

		self.bot.tree.copy_global_to(guild=discord.Object(id=guild.id))
	
	@commands.Cog.listener()
	async def on_guild_remove(self, guild):
		# open db
		with open("./.db/multiplayer/guilds.json", "r", encoding="utf-8") as read_file: guilds_config_data = json.load(read_file)

		guilds_config_data[str(guild.id)]["portal"]["presence"] = False

		# write db
		with open("./.db/multiplayer/guilds.json", "w", encoding="utf-8") as write_file: json.dump(guilds_config_data, write_file, ensure_ascii = False, indent = 4)
	

	@tasks.loop(minutes = 10)
	async def check_multiplayer_correct(self):
		# open db
		with open("./.db/multiplayer/guilds.json", "r", encoding="utf-8") as read_file: guilds_config_data = json.load(read_file)

		for guild in self.bot.guilds:
			if str(guild.id) not in guilds_config_data.keys():
				guilds_config_data[str(guild.id)] = {
					"overview": {
						"guild-name": guild.name,
						"guild-id": guild.id,
						"owner-name": guild.owner.name,
						"owner-id": guild.owner.id
					},
					"portal": {
						"presence": True,
						"gateaway": {
							"?open" : True
							#"!block-uuid": "all servers closed!"
						}
					},
					"prefix": "s!",
					"language": "ru",
					"modules": {
						"audit": False,
						"economic": False,
						"fun": False,
						"moderation": False,
						"music": False,
						"profiles": False
					},
					"premium": {
						"?work": False
						#"$p-uuid": "..."
					}
				}

			# обновление владельца гильдии
			guilds_config_data[str(guild.id)]["overview"]["owner-name"] = guild.owner.name
			guilds_config_data[str(guild.id)]["overview"]["owner-id"] = guild.owner.id

		# write db
		with open("./.db/multiplayer/guilds.json", "w", encoding="utf-8") as write_file: json.dump(guilds_config_data, write_file, ensure_ascii = False, indent = 4)
	
	@commands.Cog.listener()
	async def on_ready(self):
		await self.bot.wait_until_ready()
		self.check_multiplayer_correct.start()


async def setup(bot):
	await bot.add_cog(MultiplayerEvents(bot))