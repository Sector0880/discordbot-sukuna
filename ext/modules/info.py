import discord
from discord.ext import commands
from discord import app_commands

from botConfig import *
from datetime import *

class MyHelp(commands.MinimalHelpCommand):
   	# !help
    async def send_pages(self):
        destination = self.get_destination()
        for page in self.paginator.pages:
            emby = discord.Embed(description=page)
            await destination.send(embed=emby)
       
   # !help <command>
    async def send_command_help(self, command):
        await self.context.send("This is help command")
      
   # !help <group>
    async def send_group_help(self, group):
        await self.context.send("This is help group")
    
   # !help <cog>
    async def send_cog_help(self, cog):
        await self.context.send(f"This is help cog {cog}")

class Info(commands.Cog):
	def __init__(self, bot: commands.Bot):
		self.bot = bot
		self._original_help_command = bot.help_command
		bot.help_command = MyHelp()
		bot.help_command.cog = self
	
	def cog_unload(self):
		self.bot.help_command = self._original_help_command
	
	@commands.hybrid_command(
		name = 'ping',
		description = '–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞.',
		aliases = ['–ø–∏–Ω–≥']
	)
	async def ping(self, ctx):
		try:
			ping = self.bot.latency
			ping_emoji = 'üü©üî≥üî≥üî≥üî≥'

			if ping > 0.10000000000000000:
				ping_emoji = 'üüßüü©üî≥üî≥üî≥'

			if ping > 0.15000000000000000:
				ping_emoji = 'üü•üüßüü©üî≥üî≥'

			if ping > 0.20000000000000000:
				ping_emoji = 'üü•üü•üüßüü©üî≥'

			if ping > 0.25000000000000000:
				ping_emoji = 'üü•üü•üü•üüßüü©'

			if ping > 0.30000000000000000:
				ping_emoji = 'üü•üü•üü•üü•üüß'

			if ping > 0.35000000000000000:
				ping_emoji = 'üü•üü•üü•üü•üü•'

			# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –ø–∏–Ω–≥–æ–º –±–æ—Ç–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —à–∞—Ä–¥–∞
			shard_ping = f'{ping_emoji} `{round(self.bot.latency * 1000)}ms`'

			message = await ctx.send('–ü–æ–Ω–≥! üèì  üî≥üî≥üî≥üî≥üî≥ `—Å–µ–∫—É–Ω–¥—É...`')
			await message.edit(content = f'–ü–æ–Ω–≥! üèì  {shard_ping}')
		except Exception as e:
			await ctx.send(e)
	
	@commands.hybrid_command(
		name = "profile",
		description = '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–µ.',
		aliases = ['–ø—Ä–æ—Ñ–∏–ª—å']
	)
	async def profile(self, ctx, user: discord.Member = None):
		try:
			profile = ctx.author if not user else user
			roles = profile.roles
			role_list = ''
			role_list_number = 0

			for role in reversed(roles):
				if role != ctx.guild.default_role:
					role_list += f'<@&{role.id}> '
					role_list_number += 1
				
			if profile.status == discord.Status.online:
				status = '<:online:748149457396433016> –í —Å–µ—Ç–∏'
			elif profile.status == discord.Status.idle:
				status = '<:idle:748149485707984907> –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'
			elif profile.status == discord.Status.dnd:
				status = '<a:mark_none:815121643479236618> –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å'
			else:
				status = '<:offline:748149539915038731> –ù–µ –≤ —Å–µ—Ç–∏'
			
			emb = discord.Embed(colour = color_success)
			emb.set_author(name = f'{profile}', icon_url = profile.avatar)
			emb.set_thumbnail(url = profile.avatar)
			emb.add_field(name = '–í Discord', value = profile.created_at.strftime('**–î–∞—Ç–∞:** %d/%m/%Y\n**–í—Ä–µ–º—è:** %H:%M:%S'))
			emb.add_field(name = '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ', value = profile.joined_at.strftime('**–î–∞—Ç–∞:** %d/%m/%Y\n**–í—Ä–µ–º—è:** %H:%M:%S'))
			emb.add_field(name = '–°—Ç–∞—Ç—É—Å', value = status, inline = False)
			emb.add_field(name = f'–†–æ–ª–∏ [{role_list_number}]', value = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' if role_list == '' else role_list, inline = False)
			#emb.set_footer(text = f'ID: {profile.id}')
			emb.timestamp = datetime.utcnow()

			await ctx.send(embed = emb, ephemeral=True)
		except Exception as e:
			await ctx.send(e, ephemeral=True)
	
	@commands.hybrid_command(
		name = "avatar",
		description = '–ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É —é–∑–µ—Ä–∞.',
		aliases = ['–∞–≤–∞—Ç–∞—Ä–∫–∞']
	)
	async def avatar(self, ctx, user: discord.Member = None):
		try:
			user = ctx.author if not user else user

			emb = discord.Embed(colour = color_success)
			emb.set_author(name = user, icon_url = user.avatar)
			emb.set_image(url = user.avatar)

			await ctx.send(embed = emb, ephemeral=True)
		except Exception as e:
			await ctx.send(e, ephemeral=True)

async def setup(bot):
	await bot.add_cog(Info(bot))